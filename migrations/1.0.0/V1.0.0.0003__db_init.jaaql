\switch jaaql account to @dba
\connect to database postgres for createdb
CREATE DATABASE sentinel;
\g

\connect to database jaaql
SELECT configure_database_for_use_with_jaaql('sentinel');
\g

\connect to database sentinel
CREATE DOMAIN system_name AS character varying(63) CHECK (VALUE ~* '^[A-Za-z0-9\-]*$');

CREATE TABLE error (
    id uuid PRIMARY KEY NOT NULL default gen_random_uuid(),
    location varchar(512) not null,
    source_file varchar(255) not null,
    enc_user_agent text,
    enc_ip_address varchar(200) not null,
    error_condensed varchar(200) not null,
    stacktrace text not null,
    file_line_number int not null,
    version varchar(40) not null,
    source_system system_name not null,
    created timestamptz not null default current_timestamp
);
GRANT select on error to registered;

create view vw_error_email_permissions_view as (SELECT * FROM error);

CREATE TABLE managed_service (
    name varchar(50) PRIMARY KEY NOT NULL,
    check_every_ms int not null,
    expected_response_code int not null default 200,
    url varchar(255),
    response_time_alert_threshold_ms int not null
);
GRANT select, insert, update, delete ON managed_service to registered;

INSERT INTO managed_service (name, check_every_ms, expected_response_code, url, response_time_alert_threshold_ms) VALUES ('sentinel', 60 * 1000 * 5, 200, '{{JAAQL__BASE_URL}}/sentinel/is-alive', 120);

CREATE TABLE managed_service_check (
    id uuid PRIMARY KEY NOT NULL default gen_random_uuid(),
    managed_service varchar(50) not null,
    FOREIGN KEY (managed_service) REFERENCES managed_service ON UPDATE cascade ON DELETE cascade,
    check_at timestamptz not null default current_timestamp,
    raw_result text not null,
    response_code int not null,
    response_time_ms int not null
);

create view vw_managed_service_check as (
    SELECT
        s.*,
        c.id,
        c.check_at,
        c.raw_result,
        c.response_code,
        c.response_time_ms,
        coalesce(c.response_code = s.expected_response_code, false) and coalesce(c.response_time_ms <= s.response_time_alert_threshold_ms, false) as passed,
        coalesce(c.response_code = s.expected_response_code, false) as health_check_passed,
        coalesce(c.response_time_ms <= s.response_time_alert_threshold_ms, false) as threshold_passed
    FROM managed_service_check c
    INNER JOIN managed_service s on c.managed_service = s.name
    ORDER BY check_at DESC
);

create view vw_managed_service_threshold_email as (
    SELECT * FROM vw_managed_check WHERE threshold_passed is false;
);

create view vw_managed_service_error_email as (
    SELECT * FROM vw_managed_service_check WHERE health_check_passed is false
);

create view vw_managed_service_recent_checks as (
    SELECT
        *
    FROM (
             SELECT
                    *,
                    ROW_NUMBER() OVER (PARTITION BY name order by check_at DESC) AS row_id
             FROM vw_managed_service_check
         ) AS sub
    WHERE row_id < 101
    ORDER BY "name", "check_at" DESC
);
GRANT select on vw_managed_service_recent_checks to registered;
\g